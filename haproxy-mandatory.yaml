---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-serviceaccount
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: haproxy-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: haproxy-ingress-role
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: haproxy-ingress-role-ha-ing-sa-binding
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-controller
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-serviceaccount
    namespace: ingress-haproxy
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: haproxy-ingress-clusterrole-ha-ing-sa-binding
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: haproxy-ingress-serviceaccount
    namespace: ingress-haproxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-configuration
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
data:
    dynamic-scaling: "true"
    backend-server-slots-increment: "4"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: haproxy-ingress-controller
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
    run: haproxy-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-haproxy
      app.kubernetes.io/part-of: ingress-haproxy
      run: haproxy-ingress-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-haproxy
        app.kubernetes.io/part-of: ingress-haproxy
        run: haproxy-ingress-controller
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: haproxy-ingress-serviceaccount
      containers:
      - name: haproxy-ingress-controller
        image: quay.io/jcmoraisjr/haproxy-ingress
        args:
        - --default-backend-service=$(POD_NAMESPACE)/ingress-default-backend
        - --default-ssl-certificate=$(POD_NAMESPACE)/tls-secret
        - --configmap=$(POD_NAMESPACE)/haproxy-configuration
        - --reload-strategy=native
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stat
          containerPort: 1936
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ingress-default-backend
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
    run: ingress-default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-haproxy
      app.kubernetes.io/part-of: ingress-haproxy
      run: ingress-default-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-haproxy
        app.kubernetes.io/part-of: ingress-haproxy
        run: ingress-default-backend
    spec:
      containers:
        - name: ingress-default-backend
          image: gcr.io/google_containers/defaultbackend:1.4
          ports:
          - containerPort: 8080
---
# this service is serving as a default fallback for the haproxy-ingress-controller
apiVersion: v1
kind: Service
metadata:
  name: ingress-default-backend
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
    run: ingress-default-backend
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    run: ingress-default-backend
    app.kubernetes.io/name: ingress-haproxy
    app.kubernetes.io/part-of: ingress-haproxy
